What happens when you initialize a repository? Why do you need to do it?

    When initialized git starts to keep track of all my files so that If I commit I can come back to
    where I made the changes. I need it because I want to stay safe incase I make some error in my code
    and I could go back.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    Staging area allows us to add only selected files to be committed, it is different from working directory
    because in here we don't make changes rather reflect on changes that were made to files. It is valuable
    because it gives us final chance to review changes before making it final for the commit.

How can you use the staging area to make sure you have one commit per logical
change?

    I can use 'git diff' command to see the changes I have made, If there are more than one logical change
    then I can use reset to go back and make only one logical change before commiting.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When adding new feature or experimenting with code I should create new branches, my original code will
    remain the same so without breaking my code I can test and experiment new features.

How do the diagrams help you visualize the branch structure?

   Understanding only commit ids or branch names is not enough, diagrams visually aids how many branches
   are available and how many commits are done to that branch

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

   When merged all the commits in both branches combine to become one branch i.e. all the code in first branch
   is merged into second branch, also including code from second branch. 
   Because diagramatically it is more clearly understood than just reading the commit ids.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

   Merging manually is always useful with respect to automatic, so if there's a conflict doing a manual merge
   we can resolve the conflict while automatic merging would need machine learning capabilities to resolve a 
   conflict or merge same type of code.